{"version":3,"sources":["utils.js","App.js","index.js"],"names":["shuffleCards","cards","currentIndex","length","randomIndex","max","Math","floor","random","randomCard","currentCard","App","_useState","useState","newDeck","suits","suitIndex","currentSuit","rankCounter","cardName","concat","cardRank","card","name","suit","rank","push","makeDeck","_useState2","_slicedToArray","cardDeck","setCardDeck","_useState3","_useState4","currCards","setCurrCards","_useState5","_useState6","discardPile","setDiscardPile","_useState7","player1","player2","_useState8","scores","setPlayerScores","_useState9","_useState10","rounds","setRounds","_useState11","_useState12","winner","setWinner","_useState13","_useState14","game","setGame","handleStrings","card1","card2","cardValues","A","J","Q","K","console","log","parseInt","awardScores","score1","score2","_objectSpread","currCardElems","map","_ref","index","React","createElement","className","key","src","alt","id","Fragment","role","aria-labelledby","Button","variant","onClick","newCurrCards","pop","setTimeout","player1Elem","document","getElementById","player2Elem","player1Content","textContent","player2Content","_handleStrings","_handleStrings2","_toConsumableArray","player1FinalScore","querySelector","slice","player2FinalScore","Number","manageGameScore","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.e52d6651.chunk.js","sourcesContent":["// Get a random index ranging from 0 (inclusive) to max (exclusive).\nconst getRandomIndex = (max) => Math.floor(Math.random() * max);\n\n// Shuffle an array of cards\nexport const shuffleCards = (cards) => {\n\t// Loop over the card deck array once\n\tfor (let currentIndex = 0; currentIndex < cards.length; currentIndex += 1) {\n\t\t// Select a random index in the deck\n\t\tconst randomIndex = getRandomIndex(cards.length);\n\t\t// Select the card that corresponds to randomIndex\n\t\tconst randomCard = cards[randomIndex];\n\t\t// Select the card that corresponds to currentIndex\n\t\tconst currentCard = cards[currentIndex];\n\t\t// Swap positions of randomCard and currentCard in the deck\n\t\tcards[currentIndex] = randomCard;\n\t\tcards[randomIndex] = currentCard;\n\t}\n\t// Return the shuffled deck\n\treturn cards;\n};\n\nconst makeDeck = () => {\n\t// Initialise an empty deck array\n\tconst newDeck = [];\n\t// Initialise an array of the 4 suits in our deck. We will loop over this array.\n\tconst suits = ['H', 'D', 'C', 'S'];\n\n\t// Loop over the suits array\n\tfor (let suitIndex = 0; suitIndex < suits.length; suitIndex += 1) {\n\t\t// Store the current suit in a variable\n\t\tconst currentSuit = suits[suitIndex];\n\n\t\t// Loop from 1 to 13 to create all cards for a given suit\n\t\t// Notice rankCounter starts at 1 and not 0, and ends at 13 and not 12.\n\t\t// This is an example of a loop without an array.\n\t\tfor (let rankCounter = 1; rankCounter <= 13; rankCounter += 1) {\n\t\t\t// By default, card name and card rank are the same as rankCounter\n\t\t\tlet cardName = `${rankCounter}`;\n\t\t\tlet cardRank = rankCounter;\n\n\t\t\t// If rank is 1, 11, 12, or 13, set cardName to the ace or face card's name\n\t\t\tif (cardName === '1') {\n\t\t\t\tcardName = 'A';\n\t\t\t\t// Ace has higher rank than all other cards\n\t\t\t\tcardRank = 14;\n\t\t\t} else if (cardName === '11') {\n\t\t\t\tcardName = 'J';\n\t\t\t} else if (cardName === '12') {\n\t\t\t\tcardName = 'Q';\n\t\t\t} else if (cardName === '13') {\n\t\t\t\tcardName = 'K';\n\t\t\t}\n\n\t\t\t// Create a new card with the current name, suit, and rank\n\t\t\tconst card = {\n\t\t\t\tname: cardName,\n\t\t\t\tsuit: currentSuit,\n\t\t\t\trank: cardRank,\n\t\t\t};\n\n\t\t\t// Add the new card to the deck\n\t\t\tnewDeck.push(card);\n\t\t}\n\t}\n\n\t// Return the completed card deck\n\treturn newDeck;\n};\n\n// Export functionality to create a shuffled 52-card deck\nexport const makeShuffledDeck = () => shuffleCards(makeDeck());\n","import React, { useState } from 'react';\nimport './App.css';\nimport { makeShuffledDeck, shuffleCards } from './utils.js';\nimport Button from '@mui/material/Button';\n\nconst App = () => {\n\tconst [cardDeck, setCardDeck] = useState(makeShuffledDeck());\n\tconst [currCards, setCurrCards] = useState([]);\n\tconst [discardPile, setDiscardPile] = useState([]);\n\tconst [scores, setPlayerScores] = useState({ player1: 0, player2: 0 });\n\tconst [rounds, setRounds] = useState(0);\n\tconst [winner, setWinner] = useState('');\n\tconst [game, setGame] = useState({ player1: 0, player2: 0 });\n\n\tconst dealCards = () => {\n\t\tconst newCurrCards = [cardDeck.pop(), cardDeck.pop()];\n\t\tsetCurrCards(newCurrCards);\n\t\tsetDiscardPile(discardPile.concat(newCurrCards));\n\t\tsetRounds(rounds + 1);\n\n\t\tsetTimeout(() => {\n\t\t\tconst player1Elem = document.getElementById('player1');\n\t\t\tconst player2Elem = document.getElementById('player2');\n\n\t\t\tif (player1Elem && player2Elem) {\n\t\t\t\tconst player1Content = player1Elem.textContent;\n\t\t\t\tconst player2Content = player2Elem.textContent;\n\n\t\t\t\tconst [card1, card2] = handleStrings(player1Content, player2Content);\n\t\t\t\tawardScores(card1, card2);\n\t\t\t}\n\t\t}, 0);\n\t};\n\n\tconst handleStrings = (card1, card2) => {\n\t\tconst cardValues = { A: 14, J: 11, Q: 12, K: 13 };\n\t\tconsole.log(card1, card2);\n\n\t\tif (typeof card1 === 'number' && typeof card2 === 'number') {\n\t\t\treturn [card1, card2];\n\t\t} else {\n\t\t\tif (typeof card1 === 'string') {\n\t\t\t\tcard1 = cardValues[card1] || parseInt(card1);\n\t\t\t}\n\t\t\tif (typeof card2 === 'string') {\n\t\t\t\tcard2 = cardValues[card2] || parseInt(card2);\n\t\t\t}\n\t\t\treturn [card1, card2];\n\t\t}\n\t};\n\n\tconst manageGameScore = () => {\n\t\tconst player1FinalScore = document\n\t\t\t.querySelector('.scores :first-child')\n\t\t\t.textContent.slice(-2);\n\t\tconst player2FinalScore = document\n\t\t\t.querySelector('.scores :last-child')\n\t\t\t.textContent.slice(-2);\n\t\tif (Number(player1FinalScore) > Number(player2FinalScore)) {\n\t\t\tsetGame((game) => ({\n\t\t\t\t...game,\n\t\t\t\tplayer1: game.player1 + 1,\n\t\t\t}));\n\t\t} else {\n\t\t\tsetGame((game) => ({\n\t\t\t\t...game,\n\t\t\t\tplayer2: game.player2 + 1,\n\t\t\t}));\n\t\t}\n\n\t\tsetPlayerScores({ player1: 0, player2: 0 });\n\t};\n\n\tconst awardScores = (score1, score2) => {\n\t\tif (score1 > score2) {\n\t\t\tsetWinner('Player 1 won this round');\n\t\t\tsetPlayerScores((scores) => ({\n\t\t\t\t...scores,\n\t\t\t\tplayer1: scores.player1 + 1,\n\t\t\t}));\n\t\t} else if (score1 < score2) {\n\t\t\tsetWinner('Player 2 won this round');\n\t\t\tsetPlayerScores((scores) => ({\n\t\t\t\t...scores,\n\t\t\t\tplayer2: scores.player2 + 1,\n\t\t\t}));\n\t\t} else {\n\t\t\tsetWinner('Its a draw');\n\t\t}\n\n\t\treturn winner;\n\t};\n\n\tconst handleEmptyDeck = () => {\n\t\tif (cardDeck.length === 0 && discardPile.length === 52) {\n\t\t\tsetCardDeck([...discardPile]);\n\t\t\tsetDiscardPile([]);\n\t\t\tshuffleCards(cardDeck);\n\t\t\tmanageGameScore();\n\t\t\tsetRounds(0);\n\t\t}\n\t};\n\n\tconst currCardElems = currCards.map(({ name, suit }, index) => (\n\t\t<div className='cardContainer' key={`${name}${suit}`}>\n\t\t\t<img\n\t\t\t\tclassName='card'\n\t\t\t\tsrc={`./img/${name}${suit}.svg`}\n\t\t\t\talt={`${name} of ${suit}`}\n\t\t\t/>\n\n\t\t\t<span id={`player${index + 1}`}>{name}</span>\n\t\t</div>\n\t));\n\n\treturn (\n\t\t<>\n\t\t\t<div className='App'>\n\t\t\t\t<header className='App-header'>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\tHigh Card\n\t\t\t\t\t\t<span role='img' aria-labelledby='rocket emoji for rocket academy'>\n\t\t\t\t\t\t\t🚀\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</h3>\n\n\t\t\t\t\t<h4> Round {rounds}</h4>\n\t\t\t\t\t<div className='playingCards'>{currCardElems}</div>\n\n\t\t\t\t\t<br />\n\t\t\t\t\t{cardDeck.length > 0 ? (\n\t\t\t\t\t\t<Button variant='contained' className='btn' onClick={dealCards}>\n\t\t\t\t\t\t\tDeal\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Button variant='' onClick={handleEmptyDeck}>\n\t\t\t\t\t\t\tRestart\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{cardDeck.length === 52 ? (\n\t\t\t\t\t\t<p className='readyState'>Get ready to play!</p>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<p>{`${winner}`}</p>\n\t\t\t\t\t)}\n\t\t\t\t\t<div className='scores'>\n\t\t\t\t\t\t<p> Player 1 score: {scores.player1}</p>\n\t\t\t\t\t\t<p>Player 2 score: {scores.player2}</p>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<p>Player 1 games won: {game.player1}</p>\n\t\t\t\t\t\t<p>Player 2 games won: {game.player2}</p>\n\t\t\t\t\t</div>\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n);\n"],"sourceRoot":""}